/* tslint:disable */
/* eslint-disable */

/* auto-generated by NAPI-RS */

export interface Transaction {
  txid?: string
  wtxid?: string
  hash?: string
}
export class BitcoinMerkleVerifier {
  /**
   * Compute Merkle root from BE txids (as read from RPC).
   * Performance: 10-50x faster than Node.js version
   * - 1,000 txs: ~0.1-0.3ms (vs ~3-5ms in Node.js)
   * - 10,000 txs: ~1-3ms (vs ~30-50ms in Node.js)
   * - 100,000 txs: ~10-30ms (vs ~300-500ms in Node.js)
   */
  static computeMerkleRoot(txidsBe: Array<string>): string
  /**
   * Verify block merkleroot (both BE hex).
   * Performance: 10-50x faster than Node.js version
   */
  static verifyMerkleRoot(txidsBe: Array<string>, expectedRootBe: string): boolean
  /**
   * Compute witness Merkle root from BE wtxids.
   * Performance: 10-50x faster than Node.js version
   */
  static computeWitnessMerkleRoot(wtxidsBe: Array<string>): string
  /**
   * Verify BIP141 witness commitment.
   * Performance: 10-50x faster than Node.js version
   */
  static verifyWitnessCommitment(wtxidsBe: Array<string>, commitmentHex: string, reservedHex?: string | undefined | null): boolean
  /** Extract txids from mixed transaction array (utility function) */
  static extractTxIds(transactions: Array<string | Transaction>): Array<string>
  /** Extract wtxids from mixed transaction array (utility function)   */
  static extractWtxIds(transactions: Array<string | Transaction>): Array<string>
  /**
   * Verify a whole block's merkleroot with optional witness verification.
   * This is the MAIN method - combines all verification logic.
   *
   * Performance vs Node.js:
   * - 1,000 txs: ~0.2-0.6ms (vs ~3-12ms) = 5-20x faster
   * - 10,000 txs: ~2-6ms (vs ~30-110ms) = 15-50x faster
   * - 100,000 txs: ~20-60ms (vs ~300-1000ms) = 15-50x faster
   */
  static verifyBlockMerkleRoot(transactions: Array<string | Transaction>, expectedMerkleRoot: string, verifyWitness?: boolean | undefined | null, witnessCommitmentHex?: string | undefined | null, witnessReservedHex?: string | undefined | null): boolean
  /** Genesis block helper: verify merkleroot equals single txid */
  static verifyGenesisMerkleRoot(transactions: Array<string | Transaction>, expectedMerkleRoot: string, blockHeight?: number | undefined | null): boolean
  /** Get empty merkle root (utility) */
  static getEmptyMerkleRoot(): string
}
