export interface Transaction {
  hex?: string;
  hash: string; // Transaction hash
  nonce: number; // Transaction nonce
  blockHash: string | null; // Block hash (null if pending)
  blockNumber: number | null; // Block number (null if pending)
  transactionIndex: number | null; // Transaction index (null if pending)
  from: string; // Sender address
  to: string | null; // Recipient address (null if contract creation)
  value: string; // Transferred value (in wei)
  gas: number; // Gas limit
  gasPrice: string; // Gas price (in wei)
  input: string; // Data payload (hex)
}

export interface TransactionReceipt {
  transactionHash: string; // Transaction hash
  transactionIndex: number; // Transaction index within the block
  blockHash: string; // Block hash
  blockNumber: number; // Block number
  from: string; // Sender address
  to: string | null; // Recipient address (null if contract creation)
  cumulativeGasUsed: number; // Cumulative gas used in the block up to this transaction
  gasUsed: number; // Gas used by this transaction
  contractAddress: string | null; // Contract address created (if applicable)
  logs: Log[]; // Array of logs generated by this transaction
  logsBloom: string; // Bloom filter for logs
  status: '0x0' | '0x1'; // Transaction status ("0x1" for success, "0x0" for failure)
}

export interface Log {
  address: string; // Contract address that emitted the log
  topics: string[]; // Array of log topics (topic[0] is event signature)
  data: string; // Log data as a hex string
  blockNumber?: number | null; // Block number where the log was emitted
  transactionHash?: string | null; // Transaction hash containing this log
  transactionIndex?: number | null; // Index of the transaction in the block
  blockHash?: string | null; // Block hash where the log was included
  logIndex?: number | null; // Log index within the block
  removed?: boolean; // True if the log was removed due to a chain reorganization
}
