export interface Transaction {
  hex?: string;
  hash: string; // Transaction hash
  nonce: number; // Transaction nonce
  blockHash: string | null; // Block hash (null if pending)
  blockNumber: number | null; // Block number (null if pending)
  transactionIndex: number | null; // Transaction index (null if pending)
  from: string; // Sender address
  to: string | null; // Recipient address (null if contract creation)
  value: string; // Transferred value (in wei)
  gas: number; // Gas limit
  gasPrice: string; // Gas price (in wei)
  input: string; // Data payload (hex)

  // EIP-155 fields (added 2016, replay attack protection)
  chainId?: number; // Chain ID for replay protection
  v: string; // ECDSA recovery parameter (hex string) - REQUIRED for signed transactions
  r: string; // ECDSA signature r component (hex string) - REQUIRED for signed transactions
  s: string; // ECDSA signature s component (hex string) - REQUIRED for signed transactions

  // EIP-1559 fields (Type 2 transactions, London fork August 2021)
  type?: string; // Transaction type: "0x0" (legacy), "0x1" (EIP-2930), "0x2" (EIP-1559), "0x3" (EIP-4844)
  maxFeePerGas?: string; // Maximum total fee per gas (hex string)
  maxPriorityFeePerGas?: string; // Maximum priority fee per gas (hex string)

  // EIP-2930 fields (Type 1 transactions, Berlin fork April 2021)
  accessList?: AccessListEntry[]; // Access list to reduce gas costs

  // EIP-4844 fields (Type 3 blob transactions, Cancun fork March 2024)
  maxFeePerBlobGas?: string; // Maximum fee per blob gas (hex string)
  blobVersionedHashes?: string[]; // Array of blob versioned hashes for data availability
}

export interface AccessListEntry {
  address: string; // Contract address
  storageKeys: string[]; // Array of storage slot keys
}

export interface TransactionReceipt {
  transactionHash: string; // Transaction hash
  transactionIndex: number; // Transaction index within the block
  blockHash: string; // Block hash
  blockNumber: number; // Block number
  from: string; // Sender address
  to: string | null; // Recipient address (null if contract creation)
  cumulativeGasUsed: number; // Cumulative gas used in the block up to this transaction
  gasUsed: number; // Gas used by this transaction
  contractAddress: string | null; // Contract address created (if applicable)
  logs: Log[]; // Array of logs generated by this transaction
  logsBloom: string; // Bloom filter for logs
  status: '0x0' | '0x1'; // Transaction status ("0x1" for success, "0x0" for failure)

  // EIP-1559 fields (added in London fork)
  type?: string; // Transaction type (hex string)
  effectiveGasPrice?: number; // Actual gas price used (after EIP-1559 calculations)

  // EIP-4844 fields (added in Cancun fork for blob transactions)
  blobGasUsed?: string; // Blob gas consumed by this transaction (hex string)
  blobGasPrice?: string; // Price paid per blob gas unit (hex string)
}

export interface Log {
  address: string; // Contract address that emitted the log
  topics: string[]; // Array of log topics (topic[0] is event signature)
  data: string; // Log data as a hex string
  blockNumber?: number | null; // Block number where the log was emitted
  transactionHash?: string | null; // Transaction hash containing this log
  transactionIndex?: number | null; // Index of the transaction in the block
  blockHash?: string | null; // Block hash where the log was included
  logIndex?: number | null; // Log index within the block
  removed?: boolean; // True if the log was removed due to a chain reorganization
}
