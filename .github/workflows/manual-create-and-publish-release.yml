name: 'Create & Publish Release'

on:
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          tags: true
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies in current repository
        uses: ./.github/actions/yarn-nm-install
      
      - name: Get Version from lerna.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./lerna.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Current version: $VERSION"
      
      - name: Create Git Tag if not exists
        run: |
          TAG="v${{ env.VERSION }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping tag creation."
          else
            echo "Creating a new tag $TAG."
            git tag "$TAG"
            git push origin "$TAG"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate Release Notes from CHANGELOG.md
        id: notes
        run: |
          set -euo pipefail
          VERSION="${{ env.VERSION }}"
          echo "Looking for changelog section for version: $VERSION"

          # Escape VERSION for use inside regex (treat it as a literal)
          escape_regex() {
            # Escapes characters that are special in ERE and sed
            printf '%s' "$1" | sed -e 's/[]\/$*.^|[]/\\&/g' -e 's/(/\\(/g' -e 's/)/\\)/g' -e 's/+ /\\+ /g'
          }
          VER_ESC="$(escape_regex "$VERSION")"

          # Generic semver (with optional prerelease/build), e.g. 1.2.3, 1.2.3-alpha.0, 1.2.3-rc.1+build.5
          VER_ANY='[0-9]+\.[0-9]+\.[0-9]+([.-][0-9A-Za-z.+-]+)?'

          # Header patterns we support:
          # 1) ## 1.2.3 (date)
          # 2) ## <small>1.2.3 (date)</small>
          # 3) # [1.2.3](link) (date)  OR  # [1.2.3] (date)
          # 4) ## [1.2.3] (date)
          #
          # Notes:
          # - Allow header levels from 1 to 3 (#, ##, ###) to be safe
          # - Allow optional <small> ... </small>
          # - Allow optional [version] with optional (link)
          # - Require opening "(" for the date at the end (we don't validate the date format here)

          HEADER_FOR_VERSION="^#{1,3}[[:space:]]*(<small>)?[[:space:]]*(\\[${VER_ESC}\\](\\([^)]*\\))?|${VER_ESC})([[:space:]]*</small>)?[[:space:]]*\\("
          HEADER_FOR_ANY="^#{1,3}[[:space:]]*(<small>)?[[:space:]]*(\\[${VER_ANY}\\](\\([^)]*\\))?|${VER_ANY})([[:space:]]*</small>)?[[:space:]]*\\("

          if ! grep -Eq "$HEADER_FOR_VERSION" CHANGELOG.md; then
            echo "❌ Could not find changelog section for version ${VERSION}"
            echo "Available changelog-like sections (top 10):"
            grep -En "$HEADER_FOR_ANY" CHANGELOG.md | head -10 || true
            exit 1
          fi

          # Find the starting line of this version's header
          START_LINE="$(grep -nE "$HEADER_FOR_VERSION" CHANGELOG.md | head -1 | cut -d: -f1)"
          echo "Found header at line: $START_LINE"

          # Find the next version header after START_LINE
          NEXT_REL="$(tail -n +"$((START_LINE+1))" CHANGELOG.md | grep -nE "$HEADER_FOR_ANY" | head -1 | cut -d: -f1 || true)"

          if [ -n "$NEXT_REL" ]; then
            END_LINE="$((START_LINE + NEXT_REL - 2))"
          else
            END_LINE="$(wc -l < CHANGELOG.md)"
          fi

          # Extract the notes between headers (exclude the header line itself)
          NOTES="$(sed -n "$((START_LINE+1))","$END_LINE"p CHANGELOG.md \
            | sed -e 's/^[[:space:]]*//' -e 's/[[:space:]]*$//')"

          if [ -z "$NOTES" ]; then
            echo "❌ Could not extract release notes for version ${VERSION}"
            exit 1
          fi

          echo "✅ Successfully extracted release notes"
          echo "Release notes preview:"
          echo "$NOTES" | head -10

          # Output for next step
          {
            echo "body<<EOF"
            echo "$NOTES"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      
      - name: Publish Release Packages
        id: publish_release_packages
        run: |
          echo "Publishing packages to NPM..."
          bash ./scripts/publish-release.sh
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HUSKY: '0'  # Disable HUSKY hooks during CI
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: "v${{ env.VERSION }}"
          release_name: "v${{ env.VERSION }} (Release)"
          draft: false
          prerelease: false
          body: ${{ steps.notes.outputs.body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}