name: 'Create & Publish Release'

on:
  workflow_dispatch:

jobs:
  publish:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          tags: true
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          registry-url: 'https://registry.npmjs.org'
      
      - name: Install dependencies in current repository
        uses: ./.github/actions/yarn-nm-install
      
      - name: Get Version from lerna.json
        id: get_version
        run: |
          VERSION=$(node -p "require('./lerna.json').version")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Current version: $VERSION"
      
      - name: Create Git Tag if not exists
        run: |
          TAG="v${{ env.VERSION }}"
          if git rev-parse "$TAG" >/dev/null 2>&1; then
            echo "Tag $TAG already exists. Skipping tag creation."
          else
            echo "Creating a new tag $TAG."
            git tag "$TAG"
            git push origin "$TAG"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate Release Notes from CHANGELOG.md
        id: notes
        run: |
          set -euo pipefail
          VERSION="${{ env.VERSION }}"
          echo "Looking for changelog section for version: $VERSION"

          # Escape VERSION for ERE
          escape_regex() {
            printf '%s' "$1" | sed -e 's/[]\/$*.^|[]/\\&/g' -e 's/(/\\(/g' -e 's/)/\\)/g'
          }
          VER_ESC="$(escape_regex "$VERSION")"

          # Generic semver (incl. prerelease/build)
          VER_ANY='[0-9]+\.[0-9]+\.[0-9]+([.-][0-9A-Za-z.+-]+)?'

          # Headers we support:
          # - ## 1.2.3 (date)
          # - ## <small>1.2.3 (date)</small>
          # - # [1.2.3](link) (date)  /  # [1.2.3] (date)
          # - ## [1.2.3] (date)
          HEADER_FOR_VERSION="^#{1,3}[[:space:]]*(<small>)?[[:space:]]*(\\[${VER_ESC}\\](\\([^)]*\\))?|${VER_ESC})([[:space:]]*</small>)?[[:space:]]*\\("
          HEADER_FOR_ANY="^#{1,3}[[:space:]]*(<small>)?[[:space:]]*(\\[${VER_ANY}\\](\\([^)]*\\))?|${VER_ANY})([[:space:]]*</small>)?[[:space:]]*\\("

          if ! grep -Eq "$HEADER_FOR_VERSION" CHANGELOG.md; then
            echo "❌ Could not find changelog section for version ${VERSION}"
            echo "Available changelog-like sections (top 10):"
            grep -En "$HEADER_FOR_ANY" CHANGELOG.md | head -10 || true
            exit 1
          fi

          START_LINE="$(grep -nE "$HEADER_FOR_VERSION" CHANGELOG.md | head -1 | cut -d: -f1)"
          echo "Found header at line: $START_LINE"

          NEXT_REL="$(tail -n +"$((START_LINE+1))" CHANGELOG.md | grep -nE "$HEADER_FOR_ANY" | head -1 | cut -d: -f1 || true)"
          if [ -n "$NEXT_REL" ]; then
            END_LINE="$((START_LINE + NEXT_REL - 2))"
          else
            END_LINE="$(wc -l < CHANGELOG.md)"
          fi

          NOTES_RAW="$(sed -n "$((START_LINE+1))","$END_LINE"p CHANGELOG.md)"
          NOTES="$(printf '%s' "$NOTES_RAW" | sed -e 's/^[[:space:]]*$//g' | grep -Ev '^[[:space:]]*$' || true)"

          # If notes are empty, try to auto-generate from git log using compare URL or previous tag
          if [ -z "${NOTES}" ]; then
            echo "No explicit notes in CHANGELOG for ${VERSION}. Falling back to git log."

            HEADER_LINE="$(sed -n "${START_LINE}p" CHANGELOG.md)"
            COMPARE_URL="$(printf '%s\n' "$HEADER_LINE" | sed -nE 's/.*\]\(([^)]*)\).*/\1/p' || true)"

            PREV_TAG=""
            CUR_TAG="v${VERSION}"

            if [ -n "$COMPARE_URL" ]; then
              PREV_TAG="$(printf '%s' "$COMPARE_URL" | sed -nE 's#.*/compare/(.*)\.\.\.(.*)#\1#p' || true)"
              CUR_FROM_URL="$(printf '%s' "$COMPARE_URL" | sed -nE 's#.*/compare/(.*)\.\.\.(.*)#\2#p' || true)"
              if [ -n "$CUR_FROM_URL" ]; then CUR_TAG="$CUR_FROM_URL"; fi
            fi

            if [ -z "$PREV_TAG" ]; then
              git fetch --tags --force >/dev/null 2>&1 || true
              # Take the previous tag by semver order (second line)
              PREV_TAG="$(git tag --list 'v*' --sort=-v:refname | sed -n '2p' || true)"
            fi

            if [ -n "$PREV_TAG" ]; then
              echo "Using range: ${PREV_TAG}..${CUR_TAG}"
              GEN_NOTES="$(git log --no-merges --pretty=format:'* %s (%h)' "${PREV_TAG}..${CUR_TAG}" || true)"
              if [ -n "$GEN_NOTES" ]; then
                NOTES="$GEN_NOTES"
              fi
            fi

            if [ -z "${NOTES}" ]; then
              if [ -n "$COMPARE_URL" ]; then
                NOTES="No explicit notes. See diff: ${COMPARE_URL}"
              else
                NOTES="No explicit notes."
              fi
            fi
          fi

          echo "✅ Release notes will be used:"
          echo "$NOTES" | head -20

          {
            echo "body<<EOF"
            echo "$NOTES"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      
      - name: Publish Release Packages
        id: publish_release_packages
        run: |
          echo "Publishing packages to NPM..."
          bash ./scripts/publish-release.sh
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HUSKY: '0'  # Disable HUSKY hooks during CI
      
      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: "v${{ env.VERSION }}"
          release_name: "v${{ env.VERSION }} (Release)"
          draft: false
          prerelease: false
          body: ${{ steps.notes.outputs.body }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}